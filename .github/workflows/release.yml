name: Build & Release ASH Shell

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            asset_name: ash-shell-linux
          - os: windows-latest
            asset_name: ash-shell-windows.exe
          - os: macos-latest
            asset_name: ash-shell-macos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Build project
        run: cargo build --release --verbose

      - name: Find binary name
        id: find_binary
        shell: bash
        run: |
          # Get the binary name from Cargo.toml
          BINARY_NAME=$(grep -m 1 'name =' Cargo.toml | cut -d '"' -f 2 | cut -d "'" -f 2)
          echo "Binary name from Cargo.toml: $BINARY_NAME"
          
          # List contents of target/release to debug
          echo "Contents of release directory:"
          ls -la target/release/
          
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            BINARY_PATH="target/release/${BINARY_NAME}.exe"
          else
            BINARY_PATH="target/release/${BINARY_NAME}"
          fi
          
          echo "Checking for binary at: $BINARY_PATH"
          if [ -f "$BINARY_PATH" ]; then
            echo "Binary found!"
          else
            echo "Binary not found at expected path!"
            exit 1
          fi
          
          echo "binary_path=${BINARY_PATH}" >> $GITHUB_OUTPUT

      - name: Prepare binary
        shell: bash
        run: |
          mkdir -p release-bin
          cp ${{ steps.find_binary.outputs.binary_path }} release-bin/${{ matrix.asset_name }}
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            chmod +x release-bin/${{ matrix.asset_name }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.asset_name }}
          path: release-bin/${{ matrix.asset_name }}
          retention-days: 1

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ./artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: ASH Shell ${{ github.ref_name }}
          files: ./artifacts/*/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}